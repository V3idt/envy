// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  clerkId  String  @unique
  name     String?
  image    String?
  bio      String?
  location String?
  website  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts    Post[]
  like     Like[]
  comments Comment[]

  following Follower[] @relation("following")
  followers Follower[] @relation("follower")

  notfications         Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificaionsCreator")
}

model Post {
  id String @id @default(cuid())
  content String?
  image String?
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments Comment[]
  like Like[]
  notifications Notification[]
}

model Like {
  id String @id @default(cuid())
  postId String
  likerId String

  //relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [likerId], references: [id], onDelete: Cascade)

  @@index([likerId, postId])
  @@unique([likerId, postId])
}

model Comment{
  id String @id @default(cuid())
  postId String
  authorId String
  content String

  createdAt DateTime @default(now())

  //relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Follower{
  followerId String
  followingId String

  createdAt DateTime @default(now())

  //relations
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
  @@id([followerId, followingId])

}

model Notification{
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?

  createdAt DateTime @default(now())

  //relations
  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificaionsCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}